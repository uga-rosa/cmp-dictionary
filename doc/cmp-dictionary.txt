*cmp-dictionary.txt*		 Dictionary completion source for nvim-cmp

==============================================================================
Contents					*cmp-dictionary-contents*

Introduction				|cmp-dictionary-introduction|
Setting					|cmp-dictionary-setting|
Options					|cmp-dictionary-options|
Find dictionaries			|cmp-dictionary-find-dictionaries|
Create dictionaries			|cmp-dictionary-create-dictionaries|

==============================================================================
Introduction					*cmp-dictionary-introduction*

A dictionary completion source for nvim-cmp.
	https://github.com/hrsh7th/nvim-cmp

Requirements
- neovim >= 0.7
- nvim-cmp
  - https://github.com/hrsh7th/nvim-cmp
- plenary.nvim (optional)
  - Used for some functions that call external commands.
  - If your neovim has |vim.system()|, you do not need plenary.
  - https://github.com/nvim-lua/plenary.nvim


==============================================================================
Setting							*cmp-dictionary-setting*

Example setting.
>lua
	require("cmp").setup({
	  -- other settings
	  sources = {
	    -- other sources
	    {
	      name = "dictionary",
	      keyword_length = 2,
	    },
	  }
	})

	require("cmp_dictionary").setup({
	  paths = { "/usr/share/dict/words" },
	  exact_length = 2,
	  first_case_insensitive = true,
	  document = {
	    enable = true,
	    command = { "wn", "${label}", "-over" },
	  },
	})
<


==============================================================================
Options							*cmp-dictionary-options*

						*cmp-dictionary-option-paths*
paths ~
	string[] (default: {})

	List of dictionary paths.
	A `dictionary` is a file containing a list of words separated by
	newlines (`\n` or `\r\n`).


					*cmp-dictionary-option-exact_length*
exact_length ~
	integer (default: 2)

	It decides how many characters at the beginning are used as the exact
	match. If it is less than or equal to 0, only candidates with an exact
	prefix match will be returns.
	Candidate refinement by this source is only prefix match using this
	value (Fuzzy matching is left to the nvim-cmp body).


				*cmp-dictionary-option-first_case_insensitive*
first_case_insensitive ~
	boolean (default: false)

	If true, it will ignore the case of the first character. For example,
	if you have "Example" and "excuse" in your dictionary, typing "Ex"
	will bring up "Example" and "Excuse" as candidates, while typing "ex"
	will bring up "example" and "excuse".


				      *cmp-dictionary-option-max_number_items*
max_number_items ~
	integer (default: 0)

	This is the maximum number of items that this source will return to
	the nvim-cmp body. Less than or equal to 0 means no limit.

	NOTE:
	Using a very large dictionary and returning tens of thousands of items,
	completion becomes very laggy.


						*cmp-dictionary-option-document*
document ~
	table	(default: {
	  enable = false,
	  command = {},
	})

	|vim.system()| or plenary.nvim is required.
		https://github.com/nvim-lua/plenary.nvim

	If enabled, activate document using external command.

	The `${label}` in the command will be replaced by the item label.

	For example, to use wordnet to display a word description, set the
	following.
		https://wordnet.princeton.edu/
>lua
	{
	  enable = true,
	  command = { "wn", "${label}", "-over" },
	}
<


						*cmp-dictionary-option-external*
external ~
	table	(default: {
	  enable = false,
	  command = {},
	})

	|vim.system()| or plenary.nvim is required.
		https://github.com/nvim-lua/plenary.nvim

	If enabled, the word search method switches to using external
	commands. It will no longer load dictionaries, thus speeding up
	startup time.

	`${prefix}` and `${path}` in the command will be replaced by the
	prefix string and the path of the dictionary.

	For example, to use `look` command, set the following.
>lua
	{
	  enable = true,
	  command = { "look", "${prefix}", "${path}" },
	}
<


==============================================================================
Find dictionaries			*cmp-dictionary-find_dictionaries*

You can download dic from aspell.net or installing by package manager, xbps
extract to
<https://ftp.gnu.org/gnu/aspell/dict/0index.html>

>
	$ ls /usr/share/dict/
	american-english	british-english	words
<

After installing aspell and dictionary you want, run following command to get
dic for this plugin (plain text).

>
	aspell -d <lang> dump master | aspell -l <lang> expand > my.dict
<


==============================================================================
Create dictionaries			*cmp-dictionary-create_dictionaries*

The dictionary is recognized as a list delimited by newlines. Newlines are
`\n` or `\r\n`. For example, if you use the following file as a dictionary,
the words to be added are "hello" and "world!"
>
	hello
	world!
<


vim:tw=78:ts=8:noet:ft=help:norl:
